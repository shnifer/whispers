// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	color "image/color"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding(in *jlexer.Lexer, out *V2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "X":
			out.X = float64(in.Float64())
		case "Y":
			out.Y = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding(out *jwriter.Writer, in V2) {
	out.RawByte('{')
	first := true
	_ = first
	if in.X != 0 {
		const prefix string = ",\"X\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.X))
	}
	if in.Y != 0 {
		const prefix string = ",\"Y\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Y))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v V2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v V2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *V2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *V2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding(l, v)
}
func easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding1(in *jlexer.Lexer, out *Signature) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "t":
			out.TypeName = string(in.String())
		case "s":
			out.SigString = string(in.String())
		case "d":
			(out.Dev).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding1(out *jwriter.Writer, in Signature) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"t\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TypeName))
	}
	{
		const prefix string = ",\"s\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SigString))
	}
	{
		const prefix string = ",\"d\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Dev).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Signature) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Signature) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Signature) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Signature) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding1(l, v)
}
func easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding2(in *jlexer.Lexer, out *RBData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Pos":
			(out.Pos).UnmarshalEasyJSON(in)
		case "Ang":
			out.Ang = float64(in.Float64())
		case "Vel":
			(out.Vel).UnmarshalEasyJSON(in)
		case "AngVel":
			out.AngVel = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding2(out *jwriter.Writer, in RBData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Pos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Pos).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Ang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Ang))
	}
	{
		const prefix string = ",\"Vel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Vel).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"AngVel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.AngVel))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RBData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RBData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RBData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RBData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding2(l, v)
}
func easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding3(in *jlexer.Lexer, out *PilotData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sh":
			(out.Ship).UnmarshalEasyJSON(in)
		case "ss":
			out.SessionTime = float64(in.Float64())
		case "ft":
			out.FlightTime = float64(in.Float64())
		case "tv":
			(out.ThrustVector).UnmarshalEasyJSON(in)
		case "wd":
			out.Distortion = float64(in.Float64())
		case "dt":
			out.DistTurn = float64(in.Float64())
		case "dr":
			out.Dir = float64(in.Float64())
		case "wp":
			(out.WarpPos).UnmarshalEasyJSON(in)
		case "hp":
			out.HeatProduction = float64(in.Float64())
		case "id":
			out.MsgID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding3(out *jwriter.Writer, in PilotData) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"sh\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Ship).MarshalEasyJSON(out)
	}
	if in.SessionTime != 0 {
		const prefix string = ",\"ss\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.SessionTime))
	}
	if in.FlightTime != 0 {
		const prefix string = ",\"ft\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.FlightTime))
	}
	if true {
		const prefix string = ",\"tv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.ThrustVector).MarshalEasyJSON(out)
	}
	if in.Distortion != 0 {
		const prefix string = ",\"wd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Distortion))
	}
	if in.DistTurn != 0 {
		const prefix string = ",\"dt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.DistTurn))
	}
	if in.Dir != 0 {
		const prefix string = ",\"dr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Dir))
	}
	if true {
		const prefix string = ",\"wp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.WarpPos).MarshalEasyJSON(out)
	}
	if in.HeatProduction != 0 {
		const prefix string = ",\"hp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.HeatProduction))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MsgID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PilotData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PilotData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PilotData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PilotData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding3(l, v)
}
func easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding4(in *jlexer.Lexer, out *NaviData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bc":
			out.BeaconCount = int(in.Int())
		case "mn":
			if in.IsNull() {
				in.Skip()
				out.Mines = nil
			} else {
				in.Delim('[')
				if out.Mines == nil {
					if !in.IsDelim(']') {
						out.Mines = make([]string, 0, 4)
					} else {
						out.Mines = []string{}
					}
				} else {
					out.Mines = (out.Mines)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Mines = append(out.Mines, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ld":
			if in.IsNull() {
				in.Skip()
				out.Landing = nil
			} else {
				in.Delim('[')
				if out.Landing == nil {
					if !in.IsDelim(']') {
						out.Landing = make([]string, 0, 4)
					} else {
						out.Landing = []string{}
					}
				} else {
					out.Landing = (out.Landing)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Landing = append(out.Landing, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is":
			out.IsScanning = bool(in.Bool())
		case "st":
			out.IsDrop = bool(in.Bool())
		case "so":
			out.ScanObjectID = string(in.String())
		case "io":
			out.IsOrbiting = bool(in.Bool())
		case "oo":
			out.OrbitObjectID = string(in.String())
		case "ma":
			out.ActiveMarker = bool(in.Bool())
		case "mp":
			(out.MarkerPos).UnmarshalEasyJSON(in)
		case "sd":
			out.SonarDir = float64(in.Float64())
		case "sr":
			out.SonarRange = float64(in.Float64())
		case "sw":
			out.SonarWide = float64(in.Float64())
		case "CanLandhome":
			out.CanLandhome = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding4(out *jwriter.Writer, in NaviData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BeaconCount != 0 {
		const prefix string = ",\"bc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BeaconCount))
	}
	if len(in.Mines) != 0 {
		const prefix string = ",\"mn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.Mines {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	if len(in.Landing) != 0 {
		const prefix string = ",\"ld\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Landing {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.IsScanning {
		const prefix string = ",\"is\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsScanning))
	}
	if in.IsDrop {
		const prefix string = ",\"st\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsDrop))
	}
	if in.ScanObjectID != "" {
		const prefix string = ",\"so\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ScanObjectID))
	}
	if in.IsOrbiting {
		const prefix string = ",\"io\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsOrbiting))
	}
	if in.OrbitObjectID != "" {
		const prefix string = ",\"oo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrbitObjectID))
	}
	if in.ActiveMarker {
		const prefix string = ",\"ma\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ActiveMarker))
	}
	if true {
		const prefix string = ",\"mp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.MarkerPos).MarshalEasyJSON(out)
	}
	if in.SonarDir != 0 {
		const prefix string = ",\"sd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.SonarDir))
	}
	if in.SonarRange != 0 {
		const prefix string = ",\"sr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.SonarRange))
	}
	if in.SonarWide != 0 {
		const prefix string = ",\"sw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.SonarWide))
	}
	{
		const prefix string = ",\"CanLandhome\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.CanLandhome))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NaviData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NaviData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NaviData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NaviData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding4(l, v)
}
func easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding5(in *jlexer.Lexer, out *GalaxyPoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "pid":
			out.ParentID = string(in.String())
		case "iv":
			out.IsVirtual = bool(in.Bool())
		case "lv":
			out.Level = int(in.Int())
		case "gl":
			out.GLevel = int(in.Int())
		case "Pos":
			(out.Pos).UnmarshalEasyJSON(in)
		case "orb":
			out.Orbit = float64(in.Float64())
		case "per":
			out.Period = float64(in.Float64())
		case "ang":
			out.AngPhase = float64(in.Float64())
		case "t":
			out.Type = string(in.String())
		case "sp":
			out.SpriteAN = string(in.String())
		case "s":
			out.Size = float64(in.Float64())
		case "m":
			out.Mass = float64(in.Float64())
		case "gd":
			out.GDepth = float64(in.Float64())
		case "wsd":
			out.WarpSpawnDistance = float64(in.Float64())
		case "wyo":
			out.WarpYellowOutDist = float64(in.Float64())
		case "wgo":
			out.WarpGreenOutDist = float64(in.Float64())
		case "wgi":
			out.WarpGreenInDist = float64(in.Float64())
		case "wro":
			out.WarpRedOutDist = float64(in.Float64())
		case "wic":
			easyjson6601e8cdDecodeImageColor(in, &out.InnerColor)
		case "woc":
			easyjson6601e8cdDecodeImageColor(in, &out.OuterColor)
		case "wgc":
			easyjson6601e8cdDecodeImageColor(in, &out.GreenColor)
		case "sd":
			out.ScanData = string(in.String())
		case "mi":
			if in.IsNull() {
				in.Skip()
				out.Minerals = nil
			} else {
				in.Delim('[')
				if out.Minerals == nil {
					if !in.IsDelim(']') {
						out.Minerals = make([]int, 0, 8)
					} else {
						out.Minerals = []int{}
					}
				} else {
					out.Minerals = (out.Minerals)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int
					v7 = int(in.Int())
					out.Minerals = append(out.Minerals, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "emm":
			if in.IsNull() {
				in.Skip()
				out.Emissions = nil
			} else {
				in.Delim('[')
				if out.Emissions == nil {
					if !in.IsDelim(']') {
						out.Emissions = make([]Emission, 0, 1)
					} else {
						out.Emissions = []Emission{}
					}
				} else {
					out.Emissions = (out.Emissions)[:0]
				}
				for !in.IsDelim(']') {
					var v8 Emission
					(v8).UnmarshalEasyJSON(in)
					out.Emissions = append(out.Emissions, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sig":
			if in.IsNull() {
				in.Skip()
				out.Signatures = nil
			} else {
				in.Delim('[')
				if out.Signatures == nil {
					if !in.IsDelim(']') {
						out.Signatures = make([]Signature, 0, 1)
					} else {
						out.Signatures = []Signature{}
					}
				} else {
					out.Signatures = (out.Signatures)[:0]
				}
				for !in.IsDelim(']') {
					var v9 Signature
					(v9).UnmarshalEasyJSON(in)
					out.Signatures = append(out.Signatures, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "clr":
			easyjson6601e8cdDecodeImageColor(in, &out.Color)
		case "mns":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Mines = make(map[string][]string)
				} else {
					out.Mines = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v10 []string
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						in.Delim('[')
						if v10 == nil {
							if !in.IsDelim(']') {
								v10 = make([]string, 0, 4)
							} else {
								v10 = []string{}
							}
						} else {
							v10 = (v10)[:0]
						}
						for !in.IsDelim(']') {
							var v11 string
							v11 = string(in.String())
							v10 = append(v10, v11)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Mines)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		case "fhs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.FishHouses = make(map[string]string)
				} else {
					out.FishHouses = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v12 string
					v12 = string(in.String())
					(out.FishHouses)[key] = v12
					in.WantComma()
				}
				in.Delim('}')
			}
		case "bcs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Beacons = make(map[string]string)
				} else {
					out.Beacons = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v13 string
					v13 = string(in.String())
					(out.Beacons)[key] = v13
					in.WantComma()
				}
				in.Delim('}')
			}
		case "bbs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.BlackBoxes = make(map[string]string)
				} else {
					out.BlackBoxes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v14 string
					v14 = string(in.String())
					(out.BlackBoxes)[key] = v14
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding5(out *jwriter.Writer, in GalaxyPoint) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.ParentID != "" {
		const prefix string = ",\"pid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ParentID))
	}
	if in.IsVirtual {
		const prefix string = ",\"iv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsVirtual))
	}
	if in.Level != 0 {
		const prefix string = ",\"lv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Level))
	}
	if in.GLevel != 0 {
		const prefix string = ",\"gl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GLevel))
	}
	{
		const prefix string = ",\"Pos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Pos).MarshalEasyJSON(out)
	}
	if in.Orbit != 0 {
		const prefix string = ",\"orb\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Orbit))
	}
	if in.Period != 0 {
		const prefix string = ",\"per\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Period))
	}
	if in.AngPhase != 0 {
		const prefix string = ",\"ang\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.AngPhase))
	}
	if in.Type != "" {
		const prefix string = ",\"t\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.SpriteAN != "" {
		const prefix string = ",\"sp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SpriteAN))
	}
	if in.Size != 0 {
		const prefix string = ",\"s\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Size))
	}
	if in.Mass != 0 {
		const prefix string = ",\"m\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Mass))
	}
	if in.GDepth != 0 {
		const prefix string = ",\"gd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.GDepth))
	}
	if in.WarpSpawnDistance != 0 {
		const prefix string = ",\"wsd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.WarpSpawnDistance))
	}
	if in.WarpYellowOutDist != 0 {
		const prefix string = ",\"wyo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.WarpYellowOutDist))
	}
	if in.WarpGreenOutDist != 0 {
		const prefix string = ",\"wgo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.WarpGreenOutDist))
	}
	if in.WarpGreenInDist != 0 {
		const prefix string = ",\"wgi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.WarpGreenInDist))
	}
	if in.WarpRedOutDist != 0 {
		const prefix string = ",\"wro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.WarpRedOutDist))
	}
	if true {
		const prefix string = ",\"wic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeImageColor(out, in.InnerColor)
	}
	if true {
		const prefix string = ",\"woc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeImageColor(out, in.OuterColor)
	}
	if true {
		const prefix string = ",\"wgc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeImageColor(out, in.GreenColor)
	}
	if in.ScanData != "" {
		const prefix string = ",\"sd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ScanData))
	}
	if len(in.Minerals) != 0 {
		const prefix string = ",\"mi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.Minerals {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v16))
			}
			out.RawByte(']')
		}
	}
	if len(in.Emissions) != 0 {
		const prefix string = ",\"emm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Emissions {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Signatures) != 0 {
		const prefix string = ",\"sig\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v19, v20 := range in.Signatures {
				if v19 > 0 {
					out.RawByte(',')
				}
				(v20).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"clr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeImageColor(out, in.Color)
	}
	if len(in.Mines) != 0 {
		const prefix string = ",\"mns\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v21First := true
			for v21Name, v21Value := range in.Mines {
				if v21First {
					v21First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v21Name))
				out.RawByte(':')
				if v21Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v22, v23 := range v21Value {
						if v22 > 0 {
							out.RawByte(',')
						}
						out.String(string(v23))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.FishHouses) != 0 {
		const prefix string = ",\"fhs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v24First := true
			for v24Name, v24Value := range in.FishHouses {
				if v24First {
					v24First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v24Name))
				out.RawByte(':')
				out.String(string(v24Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Beacons) != 0 {
		const prefix string = ",\"bcs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v25First := true
			for v25Name, v25Value := range in.Beacons {
				if v25First {
					v25First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v25Name))
				out.RawByte(':')
				out.String(string(v25Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.BlackBoxes) != 0 {
		const prefix string = ",\"bbs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v26First := true
			for v26Name, v26Value := range in.BlackBoxes {
				if v26First {
					v26First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v26Name))
				out.RawByte(':')
				out.String(string(v26Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GalaxyPoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GalaxyPoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GalaxyPoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GalaxyPoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding5(l, v)
}
func easyjson6601e8cdDecodeImageColor(in *jlexer.Lexer, out *color.RGBA) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "R":
			out.R = uint8(in.Uint8())
		case "G":
			out.G = uint8(in.Uint8())
		case "B":
			out.B = uint8(in.Uint8())
		case "A":
			out.A = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeImageColor(out *jwriter.Writer, in color.RGBA) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"R\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.R))
	}
	{
		const prefix string = ",\"G\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.G))
	}
	{
		const prefix string = ",\"B\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.B))
	}
	{
		const prefix string = ",\"A\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.A))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding6(in *jlexer.Lexer, out *Galaxy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SpawnDistance":
			out.SpawnDistance = float64(in.Float64())
		case "Points":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Points = make(map[string]*GalaxyPoint)
				} else {
					out.Points = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v27 *GalaxyPoint
					if in.IsNull() {
						in.Skip()
						v27 = nil
					} else {
						if v27 == nil {
							v27 = new(GalaxyPoint)
						}
						(*v27).UnmarshalEasyJSON(in)
					}
					(out.Points)[key] = v27
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding6(out *jwriter.Writer, in Galaxy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SpawnDistance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.SpawnDistance))
	}
	{
		const prefix string = ",\"Points\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Points == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v28First := true
			for v28Name, v28Value := range in.Points {
				if v28First {
					v28First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v28Name))
				out.RawByte(':')
				if v28Value == nil {
					out.RawString("null")
				} else {
					(*v28Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Galaxy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Galaxy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Galaxy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Galaxy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding6(l, v)
}
func easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding7(in *jlexer.Lexer, out *EngiData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "deg":
			easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding8(in, &out.BSPDegrade)
		case "az":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v29 := 0
				for !in.IsDelim(']') {
					if v29 < 8 {
						(out.AZ)[v29] = float64(in.Float64())
						v29++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		case "inv":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v30 := 0
				for !in.IsDelim(']') {
					if v30 < 8 {
						(out.InV)[v30] = uint16(in.Uint16())
						v30++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		case "emm":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Emissions = make(map[string]float64)
				} else {
					out.Emissions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v31 float64
					v31 = float64(in.Float64())
					(out.Emissions)[key] = v31
					in.WantComma()
				}
				in.Delim('}')
			}
		case "c":
			(out.Counters).UnmarshalEasyJSON(in)
		case "b":
			if in.IsNull() {
				in.Skip()
				out.Boosts = nil
			} else {
				in.Delim('[')
				if out.Boosts == nil {
					if !in.IsDelim(']') {
						out.Boosts = make([]Boost, 0, 2)
					} else {
						out.Boosts = []Boost{}
					}
				} else {
					out.Boosts = (out.Boosts)[:0]
				}
				for !in.IsDelim(']') {
					var v32 Boost
					(v32).UnmarshalEasyJSON(in)
					out.Boosts = append(out.Boosts, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding7(out *jwriter.Writer, in EngiData) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"deg\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding8(out, in.BSPDegrade)
	}
	if true {
		const prefix string = ",\"az\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawByte('[')
		for v33 := range in.AZ {
			if v33 > 0 {
				out.RawByte(',')
			}
			out.Float64(float64((in.AZ)[v33]))
		}
		out.RawByte(']')
	}
	if true {
		const prefix string = ",\"inv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawByte('[')
		for v34 := range in.InV {
			if v34 > 0 {
				out.RawByte(',')
			}
			out.Uint16(uint16((in.InV)[v34]))
		}
		out.RawByte(']')
	}
	if len(in.Emissions) != 0 {
		const prefix string = ",\"emm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v35First := true
			for v35Name, v35Value := range in.Emissions {
				if v35First {
					v35First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v35Name))
				out.RawByte(':')
				out.Float64(float64(v35Value))
			}
			out.RawByte('}')
		}
	}
	if true {
		const prefix string = ",\"c\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Counters).MarshalEasyJSON(out)
	}
	if len(in.Boosts) != 0 {
		const prefix string = ",\"b\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v36, v37 := range in.Boosts {
				if v36 > 0 {
					out.RawByte(',')
				}
				(v37).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EngiData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EngiData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EngiData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EngiData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding7(l, v)
}
func easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding8(in *jlexer.Lexer, out *BSPDegrade) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "march_engine":
			easyjson6601e8cdDecode(in, &out.March_engine)
		case "warp_engine":
			easyjson6601e8cdDecode1(in, &out.Warp_engine)
		case "shunter":
			easyjson6601e8cdDecode2(in, &out.Shunter)
		case "radar":
			easyjson6601e8cdDecode3(in, &out.Radar)
		case "scaner":
			easyjson6601e8cdDecode4(in, &out.Scanner)
		case "fuel_tank":
			easyjson6601e8cdDecode5(in, &out.Fuel_tank)
		case "lss":
			easyjson6601e8cdDecode6(in, &out.Lss)
		case "shields":
			easyjson6601e8cdDecode7(in, &out.Shields)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding8(out *jwriter.Writer, in BSPDegrade) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"march_engine\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode(out, in.March_engine)
	}
	{
		const prefix string = ",\"warp_engine\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode1(out, in.Warp_engine)
	}
	{
		const prefix string = ",\"shunter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode2(out, in.Shunter)
	}
	{
		const prefix string = ",\"radar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode3(out, in.Radar)
	}
	{
		const prefix string = ",\"scaner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode4(out, in.Scanner)
	}
	{
		const prefix string = ",\"fuel_tank\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode5(out, in.Fuel_tank)
	}
	{
		const prefix string = ",\"lss\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode6(out, in.Lss)
	}
	{
		const prefix string = ",\"shields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode7(out, in.Shields)
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecode7(in *jlexer.Lexer, out *struct {
	Radiation_def   float64 `json:"radiation_def"`
	Disinfect_level float64 `json:"disinfect_level"`
	Mechanical_def  float64 `json:"mechanical_def"`
	Heat_reflection float64 `json:"heat_reflection"`
	Heat_capacity   float64 `json:"heat_capacity"`
	Heat_sink       float64 `json:"heat_sink"`
	AZ              float64 `json:"az_level"`
	Volume          float64 `json:"volume"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "radiation_def":
			out.Radiation_def = float64(in.Float64())
		case "disinfect_level":
			out.Disinfect_level = float64(in.Float64())
		case "mechanical_def":
			out.Mechanical_def = float64(in.Float64())
		case "heat_reflection":
			out.Heat_reflection = float64(in.Float64())
		case "heat_capacity":
			out.Heat_capacity = float64(in.Float64())
		case "heat_sink":
			out.Heat_sink = float64(in.Float64())
		case "az_level":
			out.AZ = float64(in.Float64())
		case "volume":
			out.Volume = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode7(out *jwriter.Writer, in struct {
	Radiation_def   float64 `json:"radiation_def"`
	Disinfect_level float64 `json:"disinfect_level"`
	Mechanical_def  float64 `json:"mechanical_def"`
	Heat_reflection float64 `json:"heat_reflection"`
	Heat_capacity   float64 `json:"heat_capacity"`
	Heat_sink       float64 `json:"heat_sink"`
	AZ              float64 `json:"az_level"`
	Volume          float64 `json:"volume"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"radiation_def\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Radiation_def))
	}
	{
		const prefix string = ",\"disinfect_level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Disinfect_level))
	}
	{
		const prefix string = ",\"mechanical_def\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Mechanical_def))
	}
	{
		const prefix string = ",\"heat_reflection\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Heat_reflection))
	}
	{
		const prefix string = ",\"heat_capacity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Heat_capacity))
	}
	{
		const prefix string = ",\"heat_sink\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Heat_sink))
	}
	{
		const prefix string = ",\"az_level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.AZ))
	}
	{
		const prefix string = ",\"volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Volume))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecode6(in *jlexer.Lexer, out *struct {
	Thermal_def       float64 `json:"thermal_def"`
	Co2_level         float64 `json:"co2_level"`
	Air_volume        float64 `json:"air_volume"`
	Air_prepare_speed float64 `json:"air_speed"`
	Lightness         float64 `json:"lightness"`
	AZ                float64 `json:"az_level"`
	Volume            float64 `json:"volume"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "thermal_def":
			out.Thermal_def = float64(in.Float64())
		case "co2_level":
			out.Co2_level = float64(in.Float64())
		case "air_volume":
			out.Air_volume = float64(in.Float64())
		case "air_speed":
			out.Air_prepare_speed = float64(in.Float64())
		case "lightness":
			out.Lightness = float64(in.Float64())
		case "az_level":
			out.AZ = float64(in.Float64())
		case "volume":
			out.Volume = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode6(out *jwriter.Writer, in struct {
	Thermal_def       float64 `json:"thermal_def"`
	Co2_level         float64 `json:"co2_level"`
	Air_volume        float64 `json:"air_volume"`
	Air_prepare_speed float64 `json:"air_speed"`
	Lightness         float64 `json:"lightness"`
	AZ                float64 `json:"az_level"`
	Volume            float64 `json:"volume"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"thermal_def\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Thermal_def))
	}
	{
		const prefix string = ",\"co2_level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Co2_level))
	}
	{
		const prefix string = ",\"air_volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Air_volume))
	}
	{
		const prefix string = ",\"air_speed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Air_prepare_speed))
	}
	{
		const prefix string = ",\"lightness\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Lightness))
	}
	{
		const prefix string = ",\"az_level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.AZ))
	}
	{
		const prefix string = ",\"volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Volume))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecode5(in *jlexer.Lexer, out *struct {
	Fuel_volume     float64 `json:"fuel_volume"`
	Fuel_Protection float64 `json:"fuel_protection"`
	Radiation_def   float64 `json:"radiation_def"`
	AZ              float64 `json:"az_level"`
	Volume          float64 `json:"volume"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fuel_volume":
			out.Fuel_volume = float64(in.Float64())
		case "fuel_protection":
			out.Fuel_Protection = float64(in.Float64())
		case "radiation_def":
			out.Radiation_def = float64(in.Float64())
		case "az_level":
			out.AZ = float64(in.Float64())
		case "volume":
			out.Volume = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode5(out *jwriter.Writer, in struct {
	Fuel_volume     float64 `json:"fuel_volume"`
	Fuel_Protection float64 `json:"fuel_protection"`
	Radiation_def   float64 `json:"radiation_def"`
	AZ              float64 `json:"az_level"`
	Volume          float64 `json:"volume"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fuel_volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Fuel_volume))
	}
	{
		const prefix string = ",\"fuel_protection\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Fuel_Protection))
	}
	{
		const prefix string = ",\"radiation_def\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Radiation_def))
	}
	{
		const prefix string = ",\"az_level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.AZ))
	}
	{
		const prefix string = ",\"volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Volume))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecode4(in *jlexer.Lexer, out *struct {
	DropRange float64 `json:"drop_range"`
	DropSpeed float64 `json:"drop_speed"`
	ScanRange float64 `json:"scan_range"`
	ScanSpeed float64 `json:"scan_speed"`
	AZ        float64 `json:"az_level"`
	Volume    float64 `json:"volume"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "drop_range":
			out.DropRange = float64(in.Float64())
		case "drop_speed":
			out.DropSpeed = float64(in.Float64())
		case "scan_range":
			out.ScanRange = float64(in.Float64())
		case "scan_speed":
			out.ScanSpeed = float64(in.Float64())
		case "az_level":
			out.AZ = float64(in.Float64())
		case "volume":
			out.Volume = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode4(out *jwriter.Writer, in struct {
	DropRange float64 `json:"drop_range"`
	DropSpeed float64 `json:"drop_speed"`
	ScanRange float64 `json:"scan_range"`
	ScanSpeed float64 `json:"scan_speed"`
	AZ        float64 `json:"az_level"`
	Volume    float64 `json:"volume"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"drop_range\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.DropRange))
	}
	{
		const prefix string = ",\"drop_speed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.DropSpeed))
	}
	{
		const prefix string = ",\"scan_range\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.ScanRange))
	}
	{
		const prefix string = ",\"scan_speed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.ScanSpeed))
	}
	{
		const prefix string = ",\"az_level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.AZ))
	}
	{
		const prefix string = ",\"volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Volume))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecode3(in *jlexer.Lexer, out *struct {
	Range_Max    float64 `json:"range_max"`
	Angle_Min    float64 `json:"angle_min"`
	Angle_Max    float64 `json:"angle_max"`
	Angle_Change float64 `json:"angle_change"`
	Range_Change float64 `json:"range_change"`
	Rotate_Speed float64 `json:"rotate_speed"`
	AZ           float64 `json:"az_level"`
	Volume       float64 `json:"volume"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "range_max":
			out.Range_Max = float64(in.Float64())
		case "angle_min":
			out.Angle_Min = float64(in.Float64())
		case "angle_max":
			out.Angle_Max = float64(in.Float64())
		case "angle_change":
			out.Angle_Change = float64(in.Float64())
		case "range_change":
			out.Range_Change = float64(in.Float64())
		case "rotate_speed":
			out.Rotate_Speed = float64(in.Float64())
		case "az_level":
			out.AZ = float64(in.Float64())
		case "volume":
			out.Volume = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode3(out *jwriter.Writer, in struct {
	Range_Max    float64 `json:"range_max"`
	Angle_Min    float64 `json:"angle_min"`
	Angle_Max    float64 `json:"angle_max"`
	Angle_Change float64 `json:"angle_change"`
	Range_Change float64 `json:"range_change"`
	Rotate_Speed float64 `json:"rotate_speed"`
	AZ           float64 `json:"az_level"`
	Volume       float64 `json:"volume"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"range_max\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Range_Max))
	}
	{
		const prefix string = ",\"angle_min\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Angle_Min))
	}
	{
		const prefix string = ",\"angle_max\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Angle_Max))
	}
	{
		const prefix string = ",\"angle_change\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Angle_Change))
	}
	{
		const prefix string = ",\"range_change\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Range_Change))
	}
	{
		const prefix string = ",\"rotate_speed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Rotate_Speed))
	}
	{
		const prefix string = ",\"az_level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.AZ))
	}
	{
		const prefix string = ",\"volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Volume))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecode2(in *jlexer.Lexer, out *struct {
	Turn_max    float64 `json:"turn"`
	Turn_acc    float64 `json:"turn_acc"`
	Turn_slow   float64 `json:"turn_slow"`
	Strafe_max  float64 `json:"strafe"`
	Strafe_acc  float64 `json:"strafe_acc"`
	Strafe_slow float64 `json:"strafe_slow"`
	Heat_prod   float64 `json:"heat_prod"`
	AZ          float64 `json:"az_level"`
	Volume      float64 `json:"volume"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "turn":
			out.Turn_max = float64(in.Float64())
		case "turn_acc":
			out.Turn_acc = float64(in.Float64())
		case "turn_slow":
			out.Turn_slow = float64(in.Float64())
		case "strafe":
			out.Strafe_max = float64(in.Float64())
		case "strafe_acc":
			out.Strafe_acc = float64(in.Float64())
		case "strafe_slow":
			out.Strafe_slow = float64(in.Float64())
		case "heat_prod":
			out.Heat_prod = float64(in.Float64())
		case "az_level":
			out.AZ = float64(in.Float64())
		case "volume":
			out.Volume = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode2(out *jwriter.Writer, in struct {
	Turn_max    float64 `json:"turn"`
	Turn_acc    float64 `json:"turn_acc"`
	Turn_slow   float64 `json:"turn_slow"`
	Strafe_max  float64 `json:"strafe"`
	Strafe_acc  float64 `json:"strafe_acc"`
	Strafe_slow float64 `json:"strafe_slow"`
	Heat_prod   float64 `json:"heat_prod"`
	AZ          float64 `json:"az_level"`
	Volume      float64 `json:"volume"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"turn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Turn_max))
	}
	{
		const prefix string = ",\"turn_acc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Turn_acc))
	}
	{
		const prefix string = ",\"turn_slow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Turn_slow))
	}
	{
		const prefix string = ",\"strafe\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Strafe_max))
	}
	{
		const prefix string = ",\"strafe_acc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Strafe_acc))
	}
	{
		const prefix string = ",\"strafe_slow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Strafe_slow))
	}
	{
		const prefix string = ",\"heat_prod\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Heat_prod))
	}
	{
		const prefix string = ",\"az_level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.AZ))
	}
	{
		const prefix string = ",\"volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Volume))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecode1(in *jlexer.Lexer, out *struct {
	Distort_max            float64 `json:"distort"`
	Distort_acc            float64 `json:"distort_acc"`
	Distort_slow           float64 `json:"distort_slow"`
	Consumption            float64 `json:"consumption"`
	Warp_enter_consumption float64 `json:"warp_enter_consumption"`
	Turn_speed             float64 `json:"turn_speed"`
	Turn_consumption       float64 `json:"turn_consumption"`
	AZ                     float64 `json:"az_level"`
	Volume                 float64 `json:"volume"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "distort":
			out.Distort_max = float64(in.Float64())
		case "distort_acc":
			out.Distort_acc = float64(in.Float64())
		case "distort_slow":
			out.Distort_slow = float64(in.Float64())
		case "consumption":
			out.Consumption = float64(in.Float64())
		case "warp_enter_consumption":
			out.Warp_enter_consumption = float64(in.Float64())
		case "turn_speed":
			out.Turn_speed = float64(in.Float64())
		case "turn_consumption":
			out.Turn_consumption = float64(in.Float64())
		case "az_level":
			out.AZ = float64(in.Float64())
		case "volume":
			out.Volume = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode1(out *jwriter.Writer, in struct {
	Distort_max            float64 `json:"distort"`
	Distort_acc            float64 `json:"distort_acc"`
	Distort_slow           float64 `json:"distort_slow"`
	Consumption            float64 `json:"consumption"`
	Warp_enter_consumption float64 `json:"warp_enter_consumption"`
	Turn_speed             float64 `json:"turn_speed"`
	Turn_consumption       float64 `json:"turn_consumption"`
	AZ                     float64 `json:"az_level"`
	Volume                 float64 `json:"volume"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"distort\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Distort_max))
	}
	{
		const prefix string = ",\"distort_acc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Distort_acc))
	}
	{
		const prefix string = ",\"distort_slow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Distort_slow))
	}
	{
		const prefix string = ",\"consumption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Consumption))
	}
	{
		const prefix string = ",\"warp_enter_consumption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Warp_enter_consumption))
	}
	{
		const prefix string = ",\"turn_speed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Turn_speed))
	}
	{
		const prefix string = ",\"turn_consumption\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Turn_consumption))
	}
	{
		const prefix string = ",\"az_level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.AZ))
	}
	{
		const prefix string = ",\"volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Volume))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecode(in *jlexer.Lexer, out *struct {
	Thrust_max   float64 `json:"thrust"`
	Thrust_acc   float64 `json:"accel"`
	Thrust_slow  float64 `json:"slowdown"`
	Reverse_max  float64 `json:"thrust_rev"`
	Reverse_acc  float64 `json:"accel_rev"`
	Reverse_slow float64 `json:"slowdown_rev"`
	Heat_prod    float64 `json:"heat_prod"`
	AZ           float64 `json:"az_level"`
	Volume       float64 `json:"volume"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "thrust":
			out.Thrust_max = float64(in.Float64())
		case "accel":
			out.Thrust_acc = float64(in.Float64())
		case "slowdown":
			out.Thrust_slow = float64(in.Float64())
		case "thrust_rev":
			out.Reverse_max = float64(in.Float64())
		case "accel_rev":
			out.Reverse_acc = float64(in.Float64())
		case "slowdown_rev":
			out.Reverse_slow = float64(in.Float64())
		case "heat_prod":
			out.Heat_prod = float64(in.Float64())
		case "az_level":
			out.AZ = float64(in.Float64())
		case "volume":
			out.Volume = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode(out *jwriter.Writer, in struct {
	Thrust_max   float64 `json:"thrust"`
	Thrust_acc   float64 `json:"accel"`
	Thrust_slow  float64 `json:"slowdown"`
	Reverse_max  float64 `json:"thrust_rev"`
	Reverse_acc  float64 `json:"accel_rev"`
	Reverse_slow float64 `json:"slowdown_rev"`
	Heat_prod    float64 `json:"heat_prod"`
	AZ           float64 `json:"az_level"`
	Volume       float64 `json:"volume"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"thrust\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Thrust_max))
	}
	{
		const prefix string = ",\"accel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Thrust_acc))
	}
	{
		const prefix string = ",\"slowdown\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Thrust_slow))
	}
	{
		const prefix string = ",\"thrust_rev\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Reverse_max))
	}
	{
		const prefix string = ",\"accel_rev\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Reverse_acc))
	}
	{
		const prefix string = ",\"slowdown_rev\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Reverse_slow))
	}
	{
		const prefix string = ",\"heat_prod\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Heat_prod))
	}
	{
		const prefix string = ",\"az_level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.AZ))
	}
	{
		const prefix string = ",\"volume\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Volume))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding9(in *jlexer.Lexer, out *EngiCounters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "f":
			out.Fuel = float64(in.Float64())
		case "h":
			out.HoleSize = float64(in.Float64())
		case "p":
			out.Pressure = float64(in.Float64())
		case "a":
			out.Air = float64(in.Float64())
		case "t":
			out.Calories = float64(in.Float64())
		case "co2":
			out.CO2 = float64(in.Float64())
		case "ft":
			out.FlightTime = float64(in.Float64())
		case "ht":
			out.Hitted = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding9(out *jwriter.Writer, in EngiCounters) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Fuel != 0 {
		const prefix string = ",\"f\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Fuel))
	}
	if in.HoleSize != 0 {
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.HoleSize))
	}
	if in.Pressure != 0 {
		const prefix string = ",\"p\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Pressure))
	}
	if in.Air != 0 {
		const prefix string = ",\"a\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Air))
	}
	if in.Calories != 0 {
		const prefix string = ",\"t\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Calories))
	}
	if in.CO2 != 0 {
		const prefix string = ",\"co2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.CO2))
	}
	if in.FlightTime != 0 {
		const prefix string = ",\"ft\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.FlightTime))
	}
	if in.Hitted != 0 {
		const prefix string = ",\"ht\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Hitted))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EngiCounters) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EngiCounters) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EngiCounters) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EngiCounters) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding9(l, v)
}
func easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding10(in *jlexer.Lexer, out *Emission) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = string(in.String())
		case "MainRange":
			out.MainRange = float64(in.Float64())
		case "MainValue":
			out.MainValue = float64(in.Float64())
		case "FarRange":
			out.FarRange = float64(in.Float64())
		case "FarValue":
			out.FarValue = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding10(out *jwriter.Writer, in Emission) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.MainRange != 0 {
		const prefix string = ",\"MainRange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.MainRange))
	}
	if in.MainValue != 0 {
		const prefix string = ",\"MainValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.MainValue))
	}
	if in.FarRange != 0 {
		const prefix string = ",\"FarRange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.FarRange))
	}
	if in.FarValue != 0 {
		const prefix string = ",\"FarValue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.FarValue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Emission) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Emission) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Emission) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Emission) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding10(l, v)
}
func easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding11(in *jlexer.Lexer, out *ESliceOfStr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Slice":
			if in.IsNull() {
				in.Skip()
				out.Slice = nil
			} else {
				in.Delim('[')
				if out.Slice == nil {
					if !in.IsDelim(']') {
						out.Slice = make(SliceOfStr, 0, 2)
					} else {
						out.Slice = SliceOfStr{}
					}
				} else {
					out.Slice = (out.Slice)[:0]
				}
				for !in.IsDelim(']') {
					var v38 struct {
						Name string
						Data string
					}
					easyjson6601e8cdDecode8(in, &v38)
					out.Slice = append(out.Slice, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding11(out *jwriter.Writer, in ESliceOfStr) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Slice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Slice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v39, v40 := range in.Slice {
				if v39 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncode8(out, v40)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ESliceOfStr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ESliceOfStr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ESliceOfStr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ESliceOfStr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding11(l, v)
}
func easyjson6601e8cdDecode8(in *jlexer.Lexer, out *struct {
	Name string
	Data string
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Data":
			out.Data = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode8(out *jwriter.Writer, in struct {
	Name string
	Data string
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Data))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding12(in *jlexer.Lexer, out *ESliceOfSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Slice":
			if in.IsNull() {
				in.Skip()
				out.Slice = nil
			} else {
				in.Delim('[')
				if out.Slice == nil {
					if !in.IsDelim(']') {
						out.Slice = make(SliceOfSlice, 0, 1)
					} else {
						out.Slice = SliceOfSlice{}
					}
				} else {
					out.Slice = (out.Slice)[:0]
				}
				for !in.IsDelim(']') {
					var v41 struct {
						Name string
						Data []uint8
					}
					easyjson6601e8cdDecode9(in, &v41)
					out.Slice = append(out.Slice, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding12(out *jwriter.Writer, in ESliceOfSlice) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Slice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Slice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.Slice {
				if v42 > 0 {
					out.RawByte(',')
				}
				easyjson6601e8cdEncode9(out, v43)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ESliceOfSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ESliceOfSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ESliceOfSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ESliceOfSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding12(l, v)
}
func easyjson6601e8cdDecode9(in *jlexer.Lexer, out *struct {
	Name string
	Data []uint8
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncode9(out *jwriter.Writer, in struct {
	Name string
	Data []uint8
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding13(in *jlexer.Lexer, out *EMapOfStr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Map":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Map = make(MapOfStr)
				} else {
					out.Map = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v47 string
					v47 = string(in.String())
					(out.Map)[key] = v47
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding13(out *jwriter.Writer, in EMapOfStr) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Map\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Map == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v48First := true
			for v48Name, v48Value := range in.Map {
				if v48First {
					v48First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v48Name))
				out.RawByte(':')
				out.String(string(v48Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EMapOfStr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EMapOfStr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EMapOfStr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EMapOfStr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding13(l, v)
}
func easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding14(in *jlexer.Lexer, out *EMapOfSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Map":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Map = make(MapOfSlice)
				} else {
					out.Map = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v49 []uint8
					if in.IsNull() {
						in.Skip()
						v49 = nil
					} else {
						v49 = in.Bytes()
					}
					(out.Map)[key] = v49
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding14(out *jwriter.Writer, in EMapOfSlice) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Map\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Map == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v51First := true
			for v51Name, v51Value := range in.Map {
				if v51First {
					v51First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v51Name))
				out.RawByte(':')
				out.Base64Bytes(v51Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EMapOfSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EMapOfSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EMapOfSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EMapOfSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding14(l, v)
}
func easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding15(in *jlexer.Lexer, out *Boost) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SysN":
			out.SysN = int(in.Int())
		case "LeftTime":
			out.LeftTime = float64(in.Float64())
		case "Power":
			out.Power = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding15(out *jwriter.Writer, in Boost) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SysN\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SysN))
	}
	{
		const prefix string = ",\"LeftTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.LeftTime))
	}
	{
		const prefix string = ",\"Power\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Power))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Boost) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Boost) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Boost) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Boost) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding15(l, v)
}
func easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding16(in *jlexer.Lexer, out *BSPParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "march_engine":
			easyjson6601e8cdDecode(in, &out.March_engine)
		case "warp_engine":
			easyjson6601e8cdDecode1(in, &out.Warp_engine)
		case "shunter":
			easyjson6601e8cdDecode2(in, &out.Shunter)
		case "radar":
			easyjson6601e8cdDecode3(in, &out.Radar)
		case "scaner":
			easyjson6601e8cdDecode4(in, &out.Scanner)
		case "fuel_tank":
			easyjson6601e8cdDecode5(in, &out.Fuel_tank)
		case "lss":
			easyjson6601e8cdDecode6(in, &out.Lss)
		case "shields":
			easyjson6601e8cdDecode7(in, &out.Shields)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding16(out *jwriter.Writer, in BSPParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"march_engine\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode(out, in.March_engine)
	}
	{
		const prefix string = ",\"warp_engine\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode1(out, in.Warp_engine)
	}
	{
		const prefix string = ",\"shunter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode2(out, in.Shunter)
	}
	{
		const prefix string = ",\"radar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode3(out, in.Radar)
	}
	{
		const prefix string = ",\"scaner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode4(out, in.Scanner)
	}
	{
		const prefix string = ",\"fuel_tank\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode5(out, in.Fuel_tank)
	}
	{
		const prefix string = ",\"lss\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode6(out, in.Lss)
	}
	{
		const prefix string = ",\"shields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6601e8cdEncode7(out, in.Shields)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BSPParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BSPParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComShniferWasmsamplesApknettestsEncoding16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BSPParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BSPParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComShniferWasmsamplesApknettestsEncoding16(l, v)
}
